JDK = JRE + developer tools like javac, debugging tools etc.
JRE = JVM + libraries(rt.jar) required to use inbuilt functionalities.
JVM = converts bytecode into platform dependent instructions.

C++ vs Java
	- both are not purely object oriented languages. But java is more object oriented than
	C++ since C++ supports structured programming.
	- Java doesn't have pointer concept. So less error prone and more secure.

Class Loader: Is something which searches classes for us. 3 types depending on where it searches
	1. System Class Loader - loads classes from CLASSPATH (jar, war which are included in the classpath).
	2. Extension Class Loader - loads from extension directory (ext, lib, jre).
	3. Bootstrap Class Loader - loads Core Java files.

	The order in which JRE asks loaders for classes is as mentioned above (as per the course)
	But on oracle doc its mentioned as the other way - https://docs.oracle.com/javase/tutorial/ext/basics/load.html
	NEED TO CLARIFY THIS

1. Object reference which are declared as instance variable will be initialized to null - test2 is null;

2. instance variable which are primitive types are initialized to 0, emptyString, 0.0 etc.

3. Constructors is used to initialize the state of an object.

4. If there is a constructor with arguments, then default constructor is not accessible.

5. Constructors are not inherited.
	- Constructors cannot be final.

6. Static methods cannot refer to non-static variables.

7. Static block is used to initialize static data members. It is called before the main method.

8. One way of executing a program without main method is to use static block.

9. Why not multiple inheritance in java?
	- to reduce complexity
	- diamond pattern problem

10. Why not pointers in Java?
	- unsafe, unsecured, error prone and complex to understand.

11. Super -> represents immediate parent

12. We cannot use both this() and super() in a constructor as they have to be the first statements inside
	a constructor.

13. Clone - To make exact copies of a class (Creating a new class using 'new' takes lot of processing). This method is easier.
	- implement Cloneable interface
	- then override the clone method and make it public as it is protected by default.
	- then use it

14. Use of overloading?
	- increases readability of a program

15. We can overload main method.

16. Static methods cannot be overridden, since they belong to the class.

17. static methods/variable -> class area
	instance methods/variable -> heap area

18. 			Overloading									Overriding
		- increases readability of				- provides specific implementation in a child
		a program								class. Helps in runtime polymorphism.
		- within a class						- happens between classes
		- parameters must be different			- must be same

19. All functions in Java are virtual by default.
	virtual -> functions can be overridden in derived classes
	pure virtual -> function must be overridden in derived classes

20. final variable cannot be changed.
	final methods cannot be overridden.
	final class cannot be inherited.

21. Main method can be made final. Program still works fine.

22. Runtime polymorphism
	- call to an overridden method is resolved at runtime rather than at compile time.

23. Static binding - biding happens at compile time.   --> http://stackoverflow.com/questions/19017258/static-vs-dynamic-binding-in-java
		- private, final and static methods/variables use static binding.
		- overloaded methods
	Dynamic binding - binding happens at run time.
		- virtual methods use dynamic binding
		- overridden methods

24. abstraction - showing only what is necessary and hiding the implementation.

25. encapsulation - wraps code and data into 1 unit.

26. Abstract classes - a class which contains abstract methods
	- Cannot give implementation to these methods.
	- The derived classes should give implementation to abstract methods.
	- A class which contains abstract methods, should be declared as abstract.
	- Cannot be instantiated, can be inherited.

27. Interface - contains
	- static final constants
	- abstract methods

	- helps in complete abstraction and multiple inheritance

28. abstract and static cannot be used together on a method.

29. Marker interface
	- contains no data member and methods
	- Serializable, Cloneable
	- classes marked with marker interfaces are treated specially by the code of Java class library
		(not the compiler or JRE).

30. 					Abstract Class									Interface
		- Can have non abstract methods					- Only abstract methods
		- No multiple inheritance						- Used for achieving multiple inheritance
		- Can have constructors							- Cannot have constructors
		- Can have static methods						- Cannot have static methods as static and abstract are contradictory

31. All variables are public-static-final by default in interfaces. You cannot change it.

32. Packages
	- provides access protection
	- removes naming collision
	- organizing code

33. Static import - can access static members directly without the class name

34. Checked Exception - checked at compile time
	- IOException, SQLException etc

35. Unchecked Exception - check at runtime
  	- Out of memory exception, arithmetic exception, NullPointerException etc

  	               +-----------+
		   		   | Throwable |
                   +-----------+
                    /         \
				   /           \
          +-------+          +-----------+
          | Error |          | Exception |
          +-------+          +-----------+
		   /  |  \           / |        \
         \________/	  	\______/    	 \
			                		+------------------+
			unchecked	 checked	| RuntimeException |
									+------------------+
									  /   |    |      \
									 \_________________/

									   unchecked

36. try block must be followed by either catch&&finally || finally blocks.

37. When finally block will not be executed?
	- when System.exit() is called
	- because of some fatal error that causes program to exit

38.								throw										throws
			- used inside a method to throw a				- used in method signature to specify that
				single exception								the method can throw multiple exceptions
			- followed by an instance						- followed by a class name

39. An exception can be rethrown.

40. If a parent class method is not throwing an exception, a sub class can throw an exception but only
	unchecked exception.

41. Exception propogation.

42. String immutable - value cannot be changed/modified.

43. Why strings are immutable in java ?
	- java uses string literal concept where if there are 2 variables have the same value, then they both
		refer to the same string object in memory(it is called string constant pool). So, we should not
		allow any variable to modify the value in the memory.

44. Why string literal concept?
	- to make Java memory efficient

45. String -> immutable, StringBuffer -> mutable
	StringBuffer -> synchronized, StringBuilder -> not synchronized

46. If you print any object, it calls toString() method of that object.

47. What is the use of nested class or nested interfaces?
	- When it makes no sense/no use to declare these objects outside.

48. finalize method is invoked just before the object is garbage collected.

49. Use of finalize method?
	- resource cleanup

50. Garbage collector thread is a daemon thread defined inside System class.
	- it is used to send request to JRE to perform garbage collection.

51. final - finally - finalize

52. Reader/Writer class hierarchy -> character oriented
	InputStream/OutputStream class hierarchy -> byte oriented

53. Serialization
	- writing the state of an object into a byte stream. Basically to send it over the network.
	Deserialization is opposite

54. Wrapper Classes - classes that allow primitive types to be accessed as objects.

55. System class what for?
	- to provide access to system resources

56.  Shallow copy
	- object references inside the class are not newly created. Their address is copied
		to the new reference variable inside the new class.
	Deep copy
 	- new object is created and assigned to the new reference variable inside the class.

57. wait and sleep?
 	- wait is defined in Object class, sleep is define in Thread class
 	- wait releases the lock, sleep doesn't release the lock

58. We cannot start a thread twice. If we try, it throws an exception.

59. Daemon threads - low priority threads which provides background support to user threads.

60. Synchronization
 		- controlled access to a shared space
 		- to prevent dead locks

61. notify - unblock one waiting thread
 	 notifyAll - unblock all waiting threads

62. Deadlock - when two threads are waiting for each other to release a resource.

63. 				ArrayList										LinkedList
			- uses dynamic array							- uses doubly linked list
			- data manipulation is not efficient			- Shifting is not required
				as lot of shifting is required
			- insertion and fetching is efficient			- data manipulation is efficient

64. 				Iterator										ListIterator
		- traverses a DS only in forward direction			- traverses a list in both directions
		- Used to iterate List, Queue, Set					- Only in List

65. HashSet/HashMap -> unordered
	TreeSet/TreeMap -> ordered

66. 				HashMap											HashTable
		- not synchronized									- synchronized
		- can contain a single null key						- cannot contain either null keys
			and multiple null values							or null values -> runtime exception

67. Collection -> interface, for data structures like List, Queue, Stack etc
	Collections -> class, to sort collection elements. Collections.sort(...)

68. hashCode and equals method -> https://www.youtube.com/watch?v=fAlRR2p9Le0

69. MultiThreading in java
	MultiTasking
		- MultiThreading
			- different threads inside a single process
			- different threads share same address space
			- so communication between threads is easier
			- light weight
		- MultiProcessing
			- heavy weight
			- context switching between processes is costly since it needs registers to be reloaded
			- communication between processes is costly
			- do not share address space

	Thread states
		New
		Runnable
		Running
		Not runnable/blocked
		Terminated

	inter-thread communication
		wait, notify, notifyAll

	inter-process communication
		message queues
		pipes
		shared memory
		message passing
		socket
		file

	Why 2 ways to create threads -> you can extend only 1 class in java but implement multiple interfaces.

70. Nested Classes

71. Garbage Collection - Using mark and sweetp algorithm
	System.gc()
	finalize of the class will be called before garbage collected

	Mark and Sweep
		- traverse all the object references and mark them as alive
		- delete all the memory locations that are not acquired by any marked object
